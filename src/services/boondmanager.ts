/**
 * Service pour l'int√©gration avec l'API Boondmanager
 * TEMPORAIREMENT D√âSACTIV√â - Mode d√©monstration uniquement
 */

export interface BoondmanagerNeed {
  id: string;
  title: string;
  client: string;
  description?: string;
  status: string;
  created_at: string;
  updated_at: string;
}

/**
 * R√©cup√®re des besoins de d√©monstration
 * L'int√©gration r√©elle Boondmanager sera impl√©ment√©e ult√©rieurement
 */
export async function fetchOpenNeeds(): Promise<BoondmanagerNeed[]> {
  console.log('üîç Fetching demo needs (Boondmanager integration disabled)');
  
  // Simuler un d√©lai r√©seau
  await new Promise(resolve => setTimeout(resolve, 500));
  
  const demoNeeds: BoondmanagerNeed[] = [
    {
      id: 'demo-1',
      title: 'D√©veloppeur Full Stack React/Node.js',
      client: 'TechCorp Solutions',
      description: 'Recherche d\'un d√©veloppeur exp√©riment√© pour projet e-commerce',
      status: 'En Cours',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: 'demo-2',
      title: 'Consultant SAP Finance',
      client: 'Global Industries', 
      description: 'Mission de 6 mois pour impl√©mentation module FI/CO',
      status: 'En Cours',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: 'demo-3',
      title: 'Chef de Projet Digital',
      client: 'Innovation Labs',
      description: 'Pilotage transformation digitale secteur bancaire',
      status: 'En Cours',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    {
      id: 'demo-4',
      title: 'Architecte Cloud AWS',
      client: 'CloudFirst Inc',
      description: 'Migration infrastructure vers AWS et formation √©quipes',
      status: 'En Cours',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
  ];
  
  console.log(`‚úÖ Returning ${demoNeeds.length} demo needs`);
  return demoNeeds;
}

/**
 * Test de connexion (toujours r√©ussi en mode d√©mo)
 */
export async function testBoondmanagerConnection(): Promise<boolean> {
  console.log('üß™ Testing demo connection (always successful)');
  await new Promise(resolve => setTimeout(resolve, 200));
  return true;
}

/**
 * R√©cup√®re les d√©tails d'un besoin de d√©monstration
 */
export async function fetchNeedDetails(needId: string): Promise<BoondmanagerNeed | null> {
  console.log(`üîç Fetching demo need details for: ${needId}`);
  
  const allNeeds = await fetchOpenNeeds();
  return allNeeds.find(need => need.id === needId) || null;
}