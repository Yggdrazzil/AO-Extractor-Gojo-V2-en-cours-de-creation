{
  "version": 3,
  "sources": ["../../../src/services/openai.ts"],
  "sourcesContent": ["import { RFP, Prospect } from '../types';\n\nfunction formatDate(date: Date): string {\n  const day = date.getDate().toString().padStart(2, '0');\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const year = date.getFullYear();\n  return `${day}/${month}/${year}`;\n}\n\nconst SYSTEM_PROMPT = `Tu es un assistant spécialisé dans l'analyse d'appels d'offres (AO) pour des missions de consulting IT.\nTa tâche est d'extraire les informations clés suivantes :\n- Le nom du client (entreprise qui émet l'AO)\n- L'intitulé de la mission\n- La localisation\n- Le TJM maximum si mentionné (en nombre uniquement, sans le symbole €)\n- La date de démarrage : extraire EXACTEMENT la date qui suit immédiatement après \"Début souhaité\"\n- La date de création : extraire EXACTEMENT la date qui suit après \"Créé le\" (peut être sur la ligne suivante)\n\nINSTRUCTIONS CRITIQUES POUR LES DATES:\n\n1. Date de création:\n   - Chercher EXACTEMENT la séquence \"Créé le\" dans le texte\n   - Extraire UNIQUEMENT la date qui suit, même si elle est sur la ligne suivante\n   - La date DOIT être au format JJ/MM/AAAA (ex: 26/12/2024)\n   - Ne pas modifier le format de la date, la garder telle quelle\n   - IMPORTANT: La date est souvent sur une nouvelle ligne après \"Créé le\"\n   - Si la date n'est pas au format JJ/MM/AAAA, renvoyer null\n\n2. Date de démarrage:\n   - Chercher la ligne contenant exactement \"Début souhaité\"\n   - Extraire UNIQUEMENT la date qui suit immédiatement (ex: \"06/01/2025\")\n   - Ne pas modifier le format de la date, la garder telle quelle\n   - Ne pas extraire d'autres dates du texte\n\n3. Règles strictes:\n   - Ne JAMAIS reformater les dates\n   - Renvoyer les dates EXACTEMENT comme elles apparaissent dans le texte\n   - Si une date n'est pas trouvée, renvoyer null\n   - Ne JAMAIS inventer de dates\n   - Ne JAMAIS utiliser d'autres dates du texte que celles qui suivent exactement \"Créé le\" et \"Début souhaité\"\n\nExemple de réponse JSON attendue:\n{\n  \"client\": \"Client confidentiel\",\n  \"mission\": \"Consultant organisation senior\",\n  \"location\": \"Lille\",\n  \"maxRate\": null,\n  \"startDate\": \"06/01/2025\",\n  \"createdAt\": \"21/12/2024\"\n}`;\n\nconst PROSPECT_SYSTEM_PROMPT = `Tu es un assistant spécialisé dans l'analyse de profils de candidats pour des missions de consulting IT.\nTa tâche est d'extraire les informations clés suivantes à partir des informations textuelles fournies sur un candidat ET du contenu de son CV :\n- Disponibilité : quand le candidat est disponible (ex: \"Immédiatement\", \"Janvier 2025\", \"2 semaines\", etc.)\n- TJM (Taux Journalier Moyen) : le tarif journalier du candidat en euros (nombre uniquement, sans le symbole €)\n- Résidence : où habite le candidat (ville, région)\n- Mobilité : capacité de déplacement du candidat (ex: \"France entière\", \"Région parisienne\", \"Télétravail uniquement\", etc.)\n- Téléphone : numéro de téléphone du candidat\n- Email : adresse email du candidat\n\nINSTRUCTIONS CRITIQUES:\n\n1. Extraction des données:\n   - Analyser BOTH le texte principal ET le contenu du CV fourni\n   - Prioriser les informations du CV pour les coordonnées (téléphone et email)\n   - Si les coordonnées ne sont trouvées ni dans le texte ni dans le CV, renvoyer null\n   - Pour les autres informations, si elles ne sont pas présentes ou ne sont pas claires, renvoyer null\n   - Ne JAMAIS inventer ou déduire d'informations\n   - Être précis dans l'extraction des données de contact depuis le CV\n\n2. Format des données:\n   - TJM : nombre entier uniquement (ex: 650, pas \"650€\" ou \"650 euros\")\n   - Téléphone : format exact tel qu'écrit dans le texte\n   - Email : adresse email complète et exacte\n   - Disponibilité : texte descriptif tel qu'indiqué\n   - Résidence : ville ou région mentionnée\n   - Mobilité : description de la capacité de déplacement\n\n3. Règles strictes:\n   - Si le TJM n'est pas mentionné explicitement, renvoyer null\n   - Chercher les coordonnées dans le CV en priorité\n   - Respecter exactement le format des coordonnées tel qu'écrit\n   - Ne pas reformater les numéros de téléphone\n\nExemple de réponse JSON attendue:\n{\n  \"availability\": \"Immédiatement\",\n  \"dailyRate\": 650,\n  \"residence\": \"Paris\",\n  \"mobility\": \"France entière\",\n  \"phone\": \"06 12 34 56 78\",\n  \"email\": \"candidat@email.com\"\n}`;\n\nexport async function analyzeRFP(content: string): Promise<Partial<RFP>> {\n  const apiKey = localStorage.getItem('openai-api-key');\n  if (!apiKey) {\n    throw new Error('Veuillez configurer votre clé API OpenAI dans les paramètres');\n  }\n\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4-turbo-preview',\n        messages: [\n          { role: 'system', content: SYSTEM_PROMPT },\n          { role: 'user', content }\n        ],\n        temperature: 0.1,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('OpenAI API error:', error);\n      throw new Error(\"Erreur lors de l'analyse. Vérifiez votre clé API dans les paramètres.\");\n    }\n\n    const data = await response.json();\n    let result;\n    try {\n      const content = data.choices[0].message.content.replace(/```json\\n|\\n```/g, '');\n      result = JSON.parse(content);\n    } catch (error) {\n      console.error('Erreur de parsing JSON:', data.choices[0].message.content);\n      throw new Error(\"Erreur lors de l'analyse de la réponse\");\n    }\n\n    // Si aucune date de création n'est trouvée, utiliser la date du jour\n    const todayFormatted = formatDate(new Date());\n\n    return {\n      client: result.client === null ? 'Non spécifié' : result.client,\n      mission: result.mission || 'Non spécifié',\n      location: result.location || 'Non spécifié',\n      maxRate: result.maxRate || null,\n      startDate: result.startDate || null,\n      createdAt: result.createdAt || todayFormatted\n    };\n  } catch (error) {\n    console.error('Erreur OpenAI:', error);\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error(\"Erreur lors de l'analyse de l'AO\");\n  }\n}\n\nexport async function analyzeProspect(content: string, cvContent?: string): Promise<Partial<Prospect>> {\n  const apiKey = localStorage.getItem('openai-api-key');\n  if (!apiKey) {\n    throw new Error('Veuillez configurer votre clé API OpenAI dans les paramètres');\n  }\n\n  // Combiner le contenu textuel et le contenu du CV\n  const fullContent = cvContent \n    ? `INFORMATIONS TEXTUELLES:\\n${content}\\n\\nCONTENU DU CV:\\n${cvContent}`\n    : content;\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o',\n        messages: [\n          { role: 'system', content: PROSPECT_SYSTEM_PROMPT },\n          { role: 'user', content: fullContent }\n        ],\n        temperature: 0.1,\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      console.error('OpenAI API error:', error);\n      throw new Error(\"Erreur lors de l'analyse. Vérifiez votre clé API dans les paramètres.\");\n    }\n\n    const data = await response.json();\n    let result;\n    try {\n      const content = data.choices[0].message.content.replace(/```json\\n|\\n```/g, '');\n      result = JSON.parse(content);\n    } catch (error) {\n      console.error('Erreur de parsing JSON:', data.choices[0].message.content);\n      throw new Error(\"Erreur lors de l'analyse de la réponse\");\n    }\n\n    // Traiter les valeurs spéciales pour les coordonnées\n    const processedResult = {\n      availability: result.availability || 'À définir',\n      dailyRate: result.dailyRate || null,\n      residence: result.residence || 'À définir',\n      mobility: result.mobility || 'À définir',\n      phone: result.phone || 'Non trouvé',\n      email: result.email || 'Non trouvé'\n    };\n\n    return processedResult;\n  } catch (error) {\n    console.error('Erreur OpenAI:', error);\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error(\"Erreur lors de l'analyse du profil\");\n  }\n}"],
  "mappings": "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",
  "names": ["content"]
}
